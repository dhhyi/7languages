{{- $folder := getenv "FOLDER" -}}
{{- $L := (datasource "language") -}}

{{- define "DELETE" }}
{{- $folder := getenv "FOLDER" -}}
if [ -f "{{ path.Join $folder . }}" ]
then
  rm "{{ path.Join $folder . }}"
fi
{{- end -}}

{{- define "GENERATE" }}
{{- $folder := getenv "FOLDER" -}}
{{- $in := .out -}}
{{- if has . "in" -}}{{ $in = .in }}{{ end }}
echo "generating" {{ path.Join $folder .out }}
cat .templates/{{ $in }}.gomplate | $gomplate > {{ path.Join $folder .out }}
{{- end -}}

#!/bin/bash

set -e
set -o pipefail

gomplate="docker run --rm -i -e FOLDER={{ $folder }} -v $PWD/{{ $folder }}/language.yaml:/language.yaml:ro hairyhenderson/gomplate:stable -d language=/language.yaml -f -"

mkdir -p .github/workflows

{{ $github := conv.Join (slice "../.github/workflows/" $folder ".yml") "" -}}
{{ tmpl.Exec "DELETE" $github }}
{{ tmpl.Exec "GENERATE" (dict "in" "workflow.yml" "out" $github) }}

mkdir -p {{ $folder }}/.devcontainer

{{ tmpl.Exec "DELETE" ".devcontainer/cont.sh" }}
{{- if (has $L.language "binary") }}
{{ tmpl.Exec "GENERATE" (dict "out" ".devcontainer/cont.sh") }}
{{- end }}

{{ tmpl.Exec "DELETE" ".devcontainer/disclaimer.sh" }}
{{ tmpl.Exec "GENERATE" (dict "out" ".devcontainer/disclaimer.sh") }}

{{ tmpl.Exec "DELETE" ".devcontainer/devcontainer.json" }}
{{ tmpl.Exec "GENERATE" (dict "out" ".devcontainer/devcontainer.json") }}

{{ tmpl.Exec "DELETE" ".devcontainer/Dockerfile" }}
{{ tmpl.Exec "GENERATE" (dict "out" ".devcontainer/Dockerfile") }}
{{ tmpl.Exec "DELETE" ".devcontainer/selftest.sh" }}
{{ tmpl.Exec "GENERATE" (dict "out" ".devcontainer/selftest.sh") }}

mkdir -p {{ $folder }}/.vscode

{{ tmpl.Exec "DELETE" ".vscode/tasks.json" }}
{{ tmpl.Exec "GENERATE" (dict "out" ".vscode/tasks.json") }}

{{ tmpl.Exec "DELETE" ".vscode/vscode.code-snippets" }}
{{- if and (has $L "vscode") (has $L.vscode "script") }}
{{ tmpl.Exec "GENERATE" (dict "out" ".vscode/vscode.code-snippets") }}
{{ end }}

if [ -z "$DEBUG" ]
then
  rm $0
fi
