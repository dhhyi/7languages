{{- $L := (datasource "language") -}}

{{- $remoteUser := "vscode"}}{{ if (has $L.devcontainer "remoteUser")}}{{ $remoteUser = $L.devcontainer.remoteUser }}{{ end -}}

{{- $from := "mcr.microsoft.com/vscode/devcontainers/base" -}}
{{- if and (has $L.devcontainer "build") (has $L.devcontainer.build "base") -}}
  {{ $from = $L.devcontainer.build.base }}
{{- end -}}

{{- $packages := slice -}}
{{- if (has $L.language "binary") -}}
  {{ $packages = coll.Append "inotify-tools" $packages }}
{{- end -}}
{{- if and (has $L.devcontainer "build") (has $L.devcontainer.build "packages") -}}
  {{ $packages = (coll.Append $packages $L.devcontainer.build.packages) | coll.Flatten }}
{{- end -}}

{{- $insertHome := and (has $L.devcontainer "build") (has $L.devcontainer.build "user") ($L.devcontainer.build.user | strings.Contains "HOME") -}}

FROM {{ $from }}

{{ if $packages -}}
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \
    && apt-get -y install --no-install-recommends \
    {{ conv.Join $packages " " }} \
    && apt-get clean && rm -rf /var/lib/apt/lists/*
{{- end -}}

{{- if and (has $L.devcontainer "build") (has $L.devcontainer.build "root") }}
{{ if and (has $L.devcontainer "build") (has $L.devcontainer.build "args") }}
{{ range $arg, $v := $L.devcontainer.build.args }}{{ if $L.devcontainer.build.root | strings.Contains $arg }}ARG {{ $arg }}
{{ end }}
{{- end }}
{{- end }}
{{ conv.Join $L.devcontainer.build.root "\n" }}
{{- end }}
{{ if (has $L.language "binary") }}
COPY cont.sh /usr/local/bin/cont
RUN chmod +x /usr/local/bin/cont
{{ end }}
COPY disclaimer.sh selftest.sh /
RUN chmod +x /disclaimer.sh /selftest.sh

USER {{ $remoteUser }}
{{- if $insertHome }}
ENV HOME=/home/{{ $remoteUser }}
{{- end }}

{{- if and (has $L.devcontainer "build") (has $L.devcontainer.build "user") }}
{{ if and (has $L.devcontainer "build") (has $L.devcontainer.build "args") }}
{{ range $arg, $v := $L.devcontainer.build.args }}{{
    if and ($L.devcontainer.build.user | strings.Contains $arg)
           (not (and (has $L.devcontainer.build "root") ($L.devcontainer.build.root | strings.Contains $arg)))
}}ARG {{ $arg }}
{{ end }}
{{- end }}
{{- end }}
{{ conv.Join $L.devcontainer.build.user "\n" }}
{{- end }}

RUN echo 'export PS1="$ "' >> $HOME/.bashrc && echo '\nexport PS1="$ "' >> $HOME/.zshrc
