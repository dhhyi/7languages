{{- $L := (datasource "language") -}}
{{- define "TASK" -}}
{
	"label": "{{ .label }}",
	"type": "shell",
	"command": "{{ .command }}",
	"problemMatcher": []
}
{{- end -}}
{{- $tasks := coll.Slice -}}
{{- if (has $L.language "binary") -}}
  {{- $command := slice $L.language.binary -}}
  {{- if has $L.language "binaryArgs" -}}
    {{- $command = coll.Append $L.language.binaryArgs $command -}}
  {{- end -}}
  {{- $command = coll.Prepend "cont ${fileDirname}" $command -}}
  {{- $command = coll.Append "${file}" $command -}}
  {{- $tasks = coll.Append (data.JSON (tmpl.Exec "TASK" (dict "label" "Run file continuously" "command" (conv.Join $command " ")))) $tasks -}}

  {{- $command = coll.Append "${input:arguments}" $command -}}
  {{- $tasks = coll.Append (data.JSON (tmpl.Exec "TASK" (dict "label" "Run file continuously with arguments" "command" (conv.Join $command " ")))) $tasks -}}
{{- end -}}
{{- if (has $L.language "repl") -}}
  {{- $tasks = coll.Append (data.JSON (tmpl.Exec "TASK" (dict "label" "Start REPL" "command" $L.language.repl))) $tasks -}}
{{- end -}}
{{- if and (has $L "vscode") (has $L.vscode "tasks") -}}
  {{- range $L.vscode.tasks -}}
    {{- $tasks = coll.Append (data.JSON (tmpl.Exec "TASK" (dict "label" .label "command" .command))) $tasks -}}
  {{- end -}}
{{- end -}}

{{- if $tasks }}{
	// See https://go.microsoft.com/fwlink/?LinkId=733558
	// for the documentation about the tasks.json format
	"version": "2.0.0",
	"tasks": {{ $tasks | data.ToJSONPretty "\t" | strings.Indent "\t" | strings.Trim "\t" }}
	{{- if (has $L.language "binary") }},
	"inputs": [
		{
			"type": "promptString",
			"id": "arguments",
			"description": "Arguments.",
			"default": "1 2 3 4 5"
		}
	]{{ end }}
}{{ end }}
